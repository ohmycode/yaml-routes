{"version":3,"sources":["../src/cli.ts"],"sourcesContent":["import { readFile } from \"fs/promises\";\nimport { watch, realpathSync } from \"fs\";\nimport { resolve } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nimport type { BuildConfig } from \"./types\";\nimport { generateTanStackRoutes } from \"./generator\";\n\nexport interface CLIOptions {\n    config?: string;\n    output?: string;\n    watch?: boolean;\n    help?: boolean;\n    version?: boolean;\n}\n\nexport function parseArgs(args: string[]): CLIOptions {\n    const options: CLIOptions = {};\n    for (let i = 0; i < args.length; i++) {\n        const arg = args[i];\n        switch (arg) {\n            case \"-c\":\n            case \"--config\":\n                options.config = args[++i];\n                break;\n            case \"-o\":\n            case \"--output\":\n                options.output = args[++i];\n                break;\n            case \"-w\":\n            case \"--watch\":\n                options.watch = true;\n                break;\n            case \"-h\":\n            case \"--help\":\n                options.help = true;\n                break;\n            case \"-v\":\n            case \"--version\":\n                options.version = true;\n                break;\n        }\n    }\n    return options;\n}\n\nexport function printHelp() {\n    console.log(`\nyaml-routes - Generate routes from YAML configuration\n\nUsage:\n  yaml-routes [options]\n\nOptions:\n  -c, --config <path>    Path to routing YAML file (default: routes.yml)\n  -o, --output <path>    Output file path (default: src/routes.gen.tsx)\n  -w, --watch            Watch for changes and regenerate automatically\n  -h, --help             Show this help message\n  -v, --version          Show version number\n\nExamples:\n  yaml-routes\n  yaml-routes --config routes.yml --output src/routes.generated.ts\n  yaml-routes --watch                    # Watch for changes in dev mode\n  yaml-routes -w -c routes.yml           # Watch custom config file\n`);\n}\n\nasync function printVersion() {\n    try {\n        const packageJson = await readFile(new URL(\"../package.json\", import.meta.url), \"utf-8\");\n        const { version } = JSON.parse(packageJson);\n        console.log(version);\n    } catch {\n        console.log(\"unknown\");\n    }\n}\n\nasync function generateRoutes(config: BuildConfig): Promise<boolean> {\n    try {\n        await generateTanStackRoutes(config);\n        console.log(\"üéâ Routes generated successfully!\");\n        return true;\n    } catch (error) {\n        // Check if it's our user-friendly error message\n        if (error instanceof Error && error.message.includes(\"ENOENT: Configuration file not found\")) {\n            console.error(\"‚ùå\", error.message);\n        } else if (error instanceof Error && error.message.includes(\"Failed to parse YAML\")) {\n            console.error(\"‚ùå\", error.message);\n        } else {\n            // For other errors, show the original format\n            console.error(\"‚ùå Error generating routes:\", error instanceof Error ? error.message : error);\n        }\n        return false;\n    }\n}\n\nfunction debounce<T extends (...args: any[]) => any>(func: T, wait: number): T {\n    let timeout: NodeJS.Timeout;\n    return ((...args: any[]) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func(...args), wait);\n    }) as T;\n}\n\nasync function watchMode(config: BuildConfig): Promise<void> {\n    console.log(\"üëÄ Watching for changes...\");\n    console.log(`üìÅ Config file: ${config.configPath}`);\n    console.log(`üìÑ Output file: ${config.outputPath}`);\n    console.log(\"üîÑ Press Ctrl+C to stop watching\\n\");\n\n    const initialSuccess = await generateRoutes(config);\n    if (!initialSuccess) {\n        console.error(\"‚ùå Initial route generation failed. Fix errors and save the config file to retry.\");\n    }\n\n    const debouncedGenerate = debounce(async () => {\n        console.log(\"\\nüìù Config file changed, regenerating routes...\");\n        const success = await generateRoutes(config);\n        if (success) {\n            console.log(\"üëÄ Continuing to watch for changes...\\n\");\n        } else {\n            console.log(\"‚ùå Fix errors and save again to retry.\\n\");\n        }\n    }, 100);\n\n    const watcher = watch(config.configPath, (eventType) => {\n        if (eventType === \"change\") {\n            debouncedGenerate();\n        }\n    });\n\n    process.on(\"SIGINT\", () => {\n        console.log(\"\\nüõë Stopping watch mode...\");\n        watcher.close();\n        process.exit(0);\n    });\n    process.on(\"SIGTERM\", () => {\n        watcher.close();\n        process.exit(0);\n    });\n}\n\nexport async function main() {\n    const args = process.argv.slice(2);\n    const options = parseArgs(args);\n\n    if (options.help) {\n        printHelp();\n        process.exit(0);\n    }\n    if (options.version) {\n        await printVersion();\n        process.exit(0);\n    }\n\n    const config: BuildConfig = {\n        configPath: resolve(options.config || \"routes.yml\"),\n        outputPath: resolve(options.output || \"src/routes.gen.tsx\"),\n        framework: \"tanstack-router\",\n    };\n\n    if (options.watch) {\n        await watchMode(config);\n    } else {\n        const success = await generateRoutes(config);\n        process.exit(success ? 0 : 1);\n    }\n}\n\n/** Robust ESM \"is main\" check that doesn't break when imported */\nfunction isExecutedAsBin(): boolean {\n    try {\n        const thisFile = realpathSync(fileURLToPath(import.meta.url));\n        const invoked = process.argv[1] ? realpathSync(process.argv[1]) : \"\";\n        if (invoked && invoked === thisFile) return true;\n        // npm/yarn/pnpm shim paths look like node_modules/.bin/yaml-routes(.cmd)\n        if (/[\\\\/]\\.bin[\\\\/](yaml-routes)(\\.cmd)?$/.test(invoked)) return true;\n    } catch {\n        return true; // be lenient\n    }\n    return false;\n}\n\n// Do NOT auto-run here; leave execution to the bin wrapper.\n// If you *really* want this file to be runnable directly (node dist/cli.js),\n// uncomment the block below:\n// if (isExecutedAsBin()) {\n//   main().catch(err => {\n//     console.error(\"Fatal error:\", err);\n//     process.exit(1);\n//   });\n// }\n"],"mappings":"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","names":[]}