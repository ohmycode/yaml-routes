import { writeFile } from "fs/promises";
import type { RoutingConfig, GeneratedRoute, GlobalSettings, SupportedLocale, BuildConfig } from "./types";
import {
    loadRoutingConfig,
    isRouteConfig,
    convertYamlPathToTanstackPath,
    generateRouteId,
    generateComponentImportPath,
    extractPathValue,
    extractComponentValue,
    normalizeRouteName,
    validateRoutingConfig,
} from "./utils";

// üöÄ Ultra-clean template system - zero boilerplate, maximum power
class CodeBuilder {
    private chunks: string[] = [];

    section(content: string, condition = true): this {
        if (condition && content.trim()) {
            this.chunks.push(content.trim());
        }
        return this;
    }

    render(): string {
        return this.chunks.join("\n\n") + "\n";
    }
}

// üéØ Smart templates that adapt to configuration
const $ = {
    imports: (components: string[], hasI18n: boolean) => `// Auto-generated by yaml-routes
import { createRootRoute, createRoute, createRouter } from '@tanstack/react-router';
import { RootComponent } from './App';${
        hasI18n
            ? `
import { useState, useEffect } from 'react';`
            : ""
    }
${components.join("\n")}`,

    settings: (config: any) => `export const globalSettings = ${JSON.stringify(config, null, 2)};`,

    i18nCode: (config: { default: string; locales: string[]; forceUrl: boolean; basePath?: string }, mappings: any = {}) => `// üåç Smart i18n system
export const pathMappings = ${JSON.stringify(mappings, null, 2)};

export function getCurrentLocale(): string {
  ${
      config.forceUrl
          ? `try {
    // Get current URL path
    const currentPath = window.location.pathname;
    let pathWithoutBase = currentPath;
    
    // Remove base path if present
    ${
        config.basePath
            ? `const basePath = '${config.basePath}';
    if (currentPath.startsWith(basePath)) {
      pathWithoutBase = currentPath.slice(basePath.length) || '/';
    }`
            : ""
    }
    
    // Detect locale from URL path
    const supportedLocales = ${JSON.stringify(config.locales)};
    const detectedLocale = supportedLocales.find(loc => 
      loc !== '${config.default}' && (
        pathWithoutBase.startsWith('/' + loc + '/') || 
        pathWithoutBase === '/' + loc || 
        pathWithoutBase === '/' + loc + '/'
      )
    );
    
    return detectedLocale || '${config.default}';
  } catch {
    return '${config.default}';
  }`
          : `return '${config.default}';`
  }
}

export function getLocalizedPath(path: string, locale: string): string {
  return pathMappings[path]?.[locale] || path;
}

export function useCurrentLocale(): string {
  const [locale, setLocale] = useState(getCurrentLocale);
  useEffect(() => {
    const update = () => setLocale(getCurrentLocale());
    window.addEventListener('popstate', update);
    return () => window.removeEventListener('popstate', update);
  }, []);
  return locale;
}

export function useRouteTo() {
  const locale = useCurrentLocale();
  return (id: string, params = {}) => routeTo(id, params, locale);
}`,

    routeIdMappings: (mappings: any) => `export const routeIdMappings = ${JSON.stringify(mappings, null, 2)};`,

    routeTo: (config: {
        hasI18n: boolean;
        forceUrl: boolean;
        default: string;
    }) => `export function routeTo(id: string, params: Record<string, any> = {}, locale?: string): string {
  const route = routeIdMappings[id.toLowerCase()];
  if (!route) return '/';
  
  ${
      config.hasI18n
          ? `// Handle locale based on forceLocaleUrl setting
  if (!locale) {
    ${
        config.forceUrl
            ? `// forceLocaleUrl is enabled - use current detected locale
    locale = getCurrentLocale();`
            : `// forceLocaleUrl is disabled - always use default locale
    locale = '${config.default}';`
    }
  }
  
  // Get the localized path template
  const localizedTemplate = getLocalizedPath(route.path, locale);`
          : `let localizedTemplate = route.path;`
  }
  
  // Fill in parameters
  let finalPath = localizedTemplate;
  Object.entries(params).forEach(([k, v]) => finalPath = finalPath.replace(\`{\${k}}\`, String(v)));
  return finalPath;
}`,

    router: (routes: string[], basePath?: string) => {
        // Extract all route names from the definitions
        const routeNames = routes.map((def) => def.match(/const (\w+Route) = createRoute/)?.[1]).filter(Boolean);

        return `const rootRoute = createRootRoute({ component: RootComponent });

${routes.join("\n\n")}

export const router = createRouter({
  routeTree: rootRoute${routeNames.length ? `.addChildren([${routeNames.join(", ")}])` : ""},
  defaultPreload: 'intent'${basePath ? `,\n  basepath: '${basePath}'` : ""}
});

declare module '@tanstack/react-router' {
  interface Register { router: typeof router; }
}`;
    },
};

// üé® Route processor with zero waste
function processRoutes(routes: GeneratedRoute[], config: any) {
    const { hasI18n, locales, default: defaultLocale } = config;
    const components = new Set<string>();
    const definitions: string[] = [];
    const pathMappings: Record<string, Record<string, string>> = {};
    const routeIdMappings: Record<string, any> = {};

    routes.forEach((route) => {
        if (hasI18n && locales.length > 1) {
            // Create separate route definitions for each locale
            locales.forEach((locale: string) => {
                const localePath = route.i18nPaths[locale];
                const localeComponent = route.i18nComponents[locale];
                const componentName = localeComponent
                    .split("/")
                    .pop()
                    ?.replace(/\.(tsx?|jsx?)$/, "");
                const routeName = locale === defaultLocale ? `${route.id}Route` : `${route.id}${locale.toUpperCase()}Route`;

                components.add(`import ${componentName} from './${localeComponent}';`);

                // Create route with locale prefix
                const routePath = locale === defaultLocale ? localePath : `/${locale}${localePath === "/" ? "" : localePath}`;

                definitions.push(`const ${routeName} = createRoute({
  getParentRoute: () => rootRoute,
  path: '${routePath.replace(/\{(\w+)\}/g, (_, param) => `\\$${param}`)}',
  component: ${componentName}
});`);
            });
        } else {
            // Single locale or no i18n
            const name = `${route.id}Route`;
            const componentName = route.component
                .split("/")
                .pop()
                ?.replace(/\.(tsx?|jsx?)$/, "");

            components.add(`import ${componentName} from './${route.component}';`);

            definitions.push(`const ${name} = createRoute({
  getParentRoute: () => rootRoute,
  path: '${route.path.replace(/\{(\w+)\}/g, (_, param) => `\\$${param}`)}',
  component: ${componentName}
});`);
        }

        // Mappings (same for all locales)
        routeIdMappings[route.id.toLowerCase()] = {
            path: route.path,
            parameters: Object.keys(route.parameters || {}),
        };

        if (hasI18n) {
            // Generate path mappings in the old format with locale prefixes
            pathMappings[route.path] = {};
            locales.forEach((locale: string) => {
                if (locale === defaultLocale) {
                    pathMappings[route.path][locale] = route.i18nPaths[locale];
                } else {
                    const localizedPath = route.i18nPaths[locale];
                    pathMappings[route.path][locale] = `/${locale}${localizedPath === "/" ? "" : localizedPath}`;
                }
            });
        }
    });

    return {
        components: Array.from(components),
        definitions,
        pathMappings,
        routeIdMappings,
        config: { hasI18n, forceUrl: config.forceUrl, default: defaultLocale, locales, basePath: config.basePath },
    };
}

export async function generateTanStackRoutes(config: BuildConfig): Promise<void> {
    console.log("üîß Loading configuration...");
    const routingConfig = await loadRoutingConfig(config.configPath);

    const validation = validateRoutingConfig(routingConfig);
    if (!validation.valid) {
        throw new Error(`‚ùå Invalid config:\n${validation.errors.join("\n")}`);
    }

    console.log("üöÄ Processing routes...");

    // Extract settings
    const globalSettings = routingConfig.settings || {};
    const i18nEnabled = globalSettings.i18n?.enabled ?? true;
    const defaultLocale = globalSettings.i18n?.defaultLocale || config.defaultLocale || "en";
    const supportedLocales = globalSettings.i18n?.supportedLocales || config.supportedLocales || ["en", "fr", "es"];
    const forceLocaleUrl = globalSettings.i18n?.forceLocaleUrl ?? false;

    console.log(`üåê i18n: ${i18nEnabled ? "enabled" : "disabled"}, locale: ${defaultLocale}, force: ${forceLocaleUrl}`);

    // Process routes
    const routes: GeneratedRoute[] = [];
    for (const [name, routeConfig] of Object.entries(routingConfig)) {
        if (name === "settings" || !isRouteConfig(routeConfig)) continue;

        const normalizedName = normalizeRouteName(name);

        const i18nPaths: Record<string, string> = {};
        const i18nComponents: Record<string, string> = {};

        if (i18nEnabled) {
            for (const locale of supportedLocales) {
                i18nPaths[locale] = extractPathValue(routeConfig.path, locale, defaultLocale);
                i18nComponents[locale] = extractComponentValue(routeConfig.component, locale, defaultLocale);
            }
        } else {
            const path = extractPathValue(routeConfig.path, defaultLocale, defaultLocale);
            const component = extractComponentValue(routeConfig.component, defaultLocale, defaultLocale);
            i18nPaths[defaultLocale] = path;
            i18nComponents[defaultLocale] = component;
        }

        routes.push({
            id: normalizedName,
            path: extractPathValue(routeConfig.path, defaultLocale, defaultLocale),
            component: extractComponentValue(routeConfig.component, defaultLocale, defaultLocale),
            parameters: routeConfig.parameters || {},
            i18nPaths,
            i18nComponents,
            settings: routeConfig.settings,
        });
    }

    // Process and generate
    const routeConfig = {
        hasI18n: i18nEnabled,
        locales: supportedLocales,
        default: defaultLocale,
        forceUrl: forceLocaleUrl,
        basePath: globalSettings.basePath,
    };
    const processed = processRoutes(routes, routeConfig);

    // Build final code
    const code = new CodeBuilder()
        .section($.imports(processed.components, i18nEnabled))
        .section($.settings(globalSettings))
        .section($.i18nCode(processed.config, processed.pathMappings), i18nEnabled)
        .section($.routeIdMappings(processed.routeIdMappings))
        .section($.routeTo(processed.config))
        .section($.router(processed.definitions, globalSettings.basePath))
        .render();

    await writeFile(config.outputPath, code);

    console.log(`‚úÖ Generated: ${config.outputPath}`);
    console.log(`üìä Routes: ${routes.length}${i18nEnabled ? ` (i18n enabled)` : ""}`);
    console.log("üéâ Complete!");
}
